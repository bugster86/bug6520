# tasks file for 6520
- name: resoconto in file {{ logfile }}
  shell: echo "Applicato il bug {{bug}} dall'utente $USER in data $(date +%d-%m-%Y_%H:%M:%S) sui server {{inventory_hostname}} " >> {{ logfile }}
  delegate_to: localhost
  changed_when: false
- name: resoconto in database ansible
  shell: mysql --user=ansible_update --password=$(cat /home/password_insert) -e "insert into ansible.bugs values ( '{{bug}}','$USER','$(date +%d-%m-%Y_%H:%M:%S)','{{inventory_hostname}}');"
  delegate_to: localhost
  changed_when: false

- name: Controlla se è un server su cui sta girando glassfish
  shell: ps -ef | grep  java | grep glassfish
  check_mode: false
  failed_when: false
  changed_when: false
  register: glassfish_up_6520
- name: Controlla se è deployato agentDesktopMGR
  shell: /opt/glassfish/bin/asadmin list-applications | grep agentdesktopmanager | awk '{print $1}'
  environment:
        PATH: "{{ ansible_env.PATH }}:/usr/java/default/bin"
  check_mode: false
  failed_when: false
  changed_when: false
  when: glassfish_up_6520.rc == 0
  register: manager_presente_6520
- name: Aggiorna AgentDesktopMGR
  include: aggiorna_agentdesktopmgr.yml
  when:
  - glassfish_up_6520.rc == 0
  - manager_presente_6520.rc == 0
  - '"agentdesktop" in manager_presente_6520.stdout'
  - '"1.14" not in manager_presente_6520.stdout'

# Controllo che almeno su un server sia presente l'applicazione CTLdapWS. Se non esiste non devo modificare
# l'impostazione di AgentDesktopMGR
- set_fact: ctldapws=false
  delegate_to: localhost
  delegate_facts: true
  run_once: true
- shell: pm2 list | grep CTLdapWS
  check_mode: false
  changed_when: false
  failed_when: false
  become: true
  become_user: reicom
  environment:
        PATH: "/opt/reitek/ct6/bin:/opt/reitek/ct6/sbin:/bin:/sbin:/usr/bin:/usr/sbin:/etc:/usr/bin/X11:/usr/local/bin:/usr/java/bin:/usr/local/kde/bin:/usr/java2/bin:/usr/ccs/bin:/usr/java/j2re1.4.2_08/bin:.:/home/reicom/.local/bin:/home/reicom/bin:/usr/local/sbin"
  register: search_ctldapws
- set_fact: ctldapws=true
  delegate_to: localhost
  delegate_facts: true
  when: search_ctldapws.rc == 0
- block:
  - fail: msg="In tutto il sistema  non ho trovato l'applicazione nodeJS CTLdapWS. Non posso proseguire"
  - meta: end_play
  when: hostvars['localhost']['ctldapws'] == false

# Eseguo la ricerca del mongodb PRIMARY (perchè la modifica la facciamo solo in quel punto)

# Imposto inizialmente la macchina mongo primary a NN
- set_fact: mongop="NN"
  delegate_to: localhost
  delegate_facts: true
  run_once: true

- name: Cerco sulle macchine qual è l'istanza mongo PRIMARY
  shell: "mongo --eval \"printjson(db.runCommand( { isMaster: 1 } ))\" | grep ismaster | grep true"
  environment:
        PATH: "/opt/reitek/ct6/bin:/opt/reitek/ct6/sbin:/bin:/sbin:/usr/bin:/usr/sbin:/etc:/usr/bin/X11:/usr/local/bin:/usr/java/bin:/usr/local/kde/bin:/usr/java2/bin:/usr/ccs/bin:/usr/java/j2re1.4.2_08/bin:.:/home/reicom/.local/bin:/home/reicom/bin:/usr/local/sbin"
  check_mode: false
  changed_when: false
  failed_when: false
  register: primarymongo

- set_fact:
    mongop: "{{ inventory_hostname }}"
  delegate_to: localhost
  delegate_facts: true
  when: primarymongo.rc == 0

- block:
  - fail: msg="Non ho trovato un'istanza PRIMARY di mongodb. Non posso procedere"
  - meta: end_play
  when: hostvars['localhost']['mongop'] == "NN"
  delegate_to: localhost
  run_once: true


- name: Modifico l'istanza primary di mongodb
  include: update_admsettings.yml
  when: inventory_hostname == hostvars['localhost']['mongop']

- name: Trovo il server LDAP Master
  include: trova_master.yml
